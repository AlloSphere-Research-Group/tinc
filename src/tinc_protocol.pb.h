// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tinc_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tinc_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tinc_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tinc_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tinc_5fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tinc_5fprotocol_2eproto;
namespace tinc {
class ConfigureParameter;
class ConfigureParameterDefaultTypeInternal;
extern ConfigureParameterDefaultTypeInternal _ConfigureParameter_default_instance_;
class ConfigureProcessor;
class ConfigureProcessorDefaultTypeInternal;
extern ConfigureProcessorDefaultTypeInternal _ConfigureProcessor_default_instance_;
class ObjectId;
class ObjectIdDefaultTypeInternal;
extern ObjectIdDefaultTypeInternal _ObjectId_default_instance_;
class ParameterSpaceValues;
class ParameterSpaceValuesDefaultTypeInternal;
extern ParameterSpaceValuesDefaultTypeInternal _ParameterSpaceValues_default_instance_;
class ParameterValue;
class ParameterValueDefaultTypeInternal;
extern ParameterValueDefaultTypeInternal _ParameterValue_default_instance_;
class RegisterDataPool;
class RegisterDataPoolDefaultTypeInternal;
extern RegisterDataPoolDefaultTypeInternal _RegisterDataPool_default_instance_;
class RegisterDiskBuffer;
class RegisterDiskBufferDefaultTypeInternal;
extern RegisterDiskBufferDefaultTypeInternal _RegisterDiskBuffer_default_instance_;
class RegisterParameter;
class RegisterParameterDefaultTypeInternal;
extern RegisterParameterDefaultTypeInternal _RegisterParameter_default_instance_;
class RegisterParameterSpace;
class RegisterParameterSpaceDefaultTypeInternal;
extern RegisterParameterSpaceDefaultTypeInternal _RegisterParameterSpace_default_instance_;
class RegisterProcessor;
class RegisterProcessorDefaultTypeInternal;
extern RegisterProcessorDefaultTypeInternal _RegisterProcessor_default_instance_;
class TincMessage;
class TincMessageDefaultTypeInternal;
extern TincMessageDefaultTypeInternal _TincMessage_default_instance_;
}  // namespace tinc
PROTOBUF_NAMESPACE_OPEN
template<> ::tinc::ConfigureParameter* Arena::CreateMaybeMessage<::tinc::ConfigureParameter>(Arena*);
template<> ::tinc::ConfigureProcessor* Arena::CreateMaybeMessage<::tinc::ConfigureProcessor>(Arena*);
template<> ::tinc::ObjectId* Arena::CreateMaybeMessage<::tinc::ObjectId>(Arena*);
template<> ::tinc::ParameterSpaceValues* Arena::CreateMaybeMessage<::tinc::ParameterSpaceValues>(Arena*);
template<> ::tinc::ParameterValue* Arena::CreateMaybeMessage<::tinc::ParameterValue>(Arena*);
template<> ::tinc::RegisterDataPool* Arena::CreateMaybeMessage<::tinc::RegisterDataPool>(Arena*);
template<> ::tinc::RegisterDiskBuffer* Arena::CreateMaybeMessage<::tinc::RegisterDiskBuffer>(Arena*);
template<> ::tinc::RegisterParameter* Arena::CreateMaybeMessage<::tinc::RegisterParameter>(Arena*);
template<> ::tinc::RegisterParameterSpace* Arena::CreateMaybeMessage<::tinc::RegisterParameterSpace>(Arena*);
template<> ::tinc::RegisterProcessor* Arena::CreateMaybeMessage<::tinc::RegisterProcessor>(Arena*);
template<> ::tinc::TincMessage* Arena::CreateMaybeMessage<::tinc::TincMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tinc {

enum MessageType : int {
  REQUEST = 0,
  REMOVE = 1,
  REGISTER = 2,
  CONFIGURE = 3,
  COMMAND = 4,
  COMMAND_REPLY = 5,
  PING = 98,
  PONG = 99,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = REQUEST;
constexpr MessageType MessageType_MAX = PONG;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ObjectType : int {
  PARAMETER = 0,
  PROCESSOR = 1,
  DISK_BUFFER = 2,
  DATA_POOL = 3,
  PARAMETER_SPACE = 4,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ObjectType_IsValid(int value);
constexpr ObjectType ObjectType_MIN = PARAMETER;
constexpr ObjectType ObjectType_MAX = PARAMETER_SPACE;
constexpr int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor();
template<typename T>
inline const std::string& ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectType_descriptor(), enum_t_value);
}
inline bool ObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectType>(
    ObjectType_descriptor(), name, value);
}
enum ProcessorType : int {
  DATASCRIPT = 0,
  CHAIN = 1,
  CPP = 2,
  ProcessorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProcessorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProcessorType_IsValid(int value);
constexpr ProcessorType ProcessorType_MIN = DATASCRIPT;
constexpr ProcessorType ProcessorType_MAX = CPP;
constexpr int ProcessorType_ARRAYSIZE = ProcessorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessorType_descriptor();
template<typename T>
inline const std::string& ProcessorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcessorType_descriptor(), enum_t_value);
}
inline bool ProcessorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProcessorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcessorType>(
    ProcessorType_descriptor(), name, value);
}
enum ParameterDataType : int {
  PARAMETER_FLOAT = 0,
  PARAMETER_BOOL = 1,
  PARAMETER_STRING = 2,
  PARAMETER_INT32 = 3,
  PARAMETER_VEC3F = 4,
  PARAMETER_VEC4F = 5,
  PARAMETER_COLORF = 6,
  PARAMETER_POSED = 7,
  PARAMETER_MENU = 8,
  PARAMETER_CHOICE = 9,
  PARAMETER_TRIGGER = 10,
  ParameterDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParameterDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParameterDataType_IsValid(int value);
constexpr ParameterDataType ParameterDataType_MIN = PARAMETER_FLOAT;
constexpr ParameterDataType ParameterDataType_MAX = PARAMETER_TRIGGER;
constexpr int ParameterDataType_ARRAYSIZE = ParameterDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParameterDataType_descriptor();
template<typename T>
inline const std::string& ParameterDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParameterDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParameterDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParameterDataType_descriptor(), enum_t_value);
}
inline bool ParameterDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParameterDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParameterDataType>(
    ParameterDataType_descriptor(), name, value);
}
enum ParameterConfigureType : int {
  VALUE = 0,
  MIN = 1,
  MAX = 2,
  SPACE = 3,
  ParameterConfigureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ParameterConfigureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ParameterConfigureType_IsValid(int value);
constexpr ParameterConfigureType ParameterConfigureType_MIN = VALUE;
constexpr ParameterConfigureType ParameterConfigureType_MAX = SPACE;
constexpr int ParameterConfigureType_ARRAYSIZE = ParameterConfigureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParameterConfigureType_descriptor();
template<typename T>
inline const std::string& ParameterConfigureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParameterConfigureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParameterConfigureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParameterConfigureType_descriptor(), enum_t_value);
}
inline bool ParameterConfigureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParameterConfigureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParameterConfigureType>(
    ParameterConfigureType_descriptor(), name, value);
}
// ===================================================================

class TincMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinc.TincMessage) */ {
 public:
  inline TincMessage() : TincMessage(nullptr) {}
  virtual ~TincMessage();

  TincMessage(const TincMessage& from);
  TincMessage(TincMessage&& from) noexcept
    : TincMessage() {
    *this = ::std::move(from);
  }

  inline TincMessage& operator=(const TincMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TincMessage& operator=(TincMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TincMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TincMessage* internal_default_instance() {
    return reinterpret_cast<const TincMessage*>(
               &_TincMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TincMessage& a, TincMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TincMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TincMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TincMessage* New() const final {
    return CreateMaybeMessage<TincMessage>(nullptr);
  }

  TincMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TincMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TincMessage& from);
  void MergeFrom(const TincMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TincMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinc.TincMessage";
  }
  protected:
  explicit TincMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tinc_5fprotocol_2eproto);
    return ::descriptor_table_tinc_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 4,
    kMessageTypeFieldNumber = 2,
    kObjectTypeFieldNumber = 3,
  };
  // .google.protobuf.Any details = 4;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const PROTOBUF_NAMESPACE_ID::Any& details() const;
  PROTOBUF_NAMESPACE_ID::Any* release_details();
  PROTOBUF_NAMESPACE_ID::Any* mutable_details();
  void set_allocated_details(PROTOBUF_NAMESPACE_ID::Any* details);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_details() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      PROTOBUF_NAMESPACE_ID::Any* details);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_details();

  // .tinc.MessageType messageType = 2;
  void clear_messagetype();
  ::tinc::MessageType messagetype() const;
  void set_messagetype(::tinc::MessageType value);
  private:
  ::tinc::MessageType _internal_messagetype() const;
  void _internal_set_messagetype(::tinc::MessageType value);
  public:

  // .tinc.ObjectType objectType = 3;
  void clear_objecttype();
  ::tinc::ObjectType objecttype() const;
  void set_objecttype(::tinc::ObjectType value);
  private:
  ::tinc::ObjectType _internal_objecttype() const;
  void _internal_set_objecttype(::tinc::ObjectType value);
  public:

  // @@protoc_insertion_point(class_scope:tinc.TincMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* details_;
  int messagetype_;
  int objecttype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tinc_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ObjectId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinc.ObjectId) */ {
 public:
  inline ObjectId() : ObjectId(nullptr) {}
  virtual ~ObjectId();

  ObjectId(const ObjectId& from);
  ObjectId(ObjectId&& from) noexcept
    : ObjectId() {
    *this = ::std::move(from);
  }

  inline ObjectId& operator=(const ObjectId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectId& operator=(ObjectId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectId* internal_default_instance() {
    return reinterpret_cast<const ObjectId*>(
               &_ObjectId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectId& a, ObjectId& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectId* New() const final {
    return CreateMaybeMessage<ObjectId>(nullptr);
  }

  ObjectId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectId& from);
  void MergeFrom(const ObjectId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinc.ObjectId";
  }
  protected:
  explicit ObjectId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tinc_5fprotocol_2eproto);
    return ::descriptor_table_tinc_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:tinc.ObjectId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tinc_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ParameterValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinc.ParameterValue) */ {
 public:
  inline ParameterValue() : ParameterValue(nullptr) {}
  virtual ~ParameterValue();

  ParameterValue(const ParameterValue& from);
  ParameterValue(ParameterValue&& from) noexcept
    : ParameterValue() {
    *this = ::std::move(from);
  }

  inline ParameterValue& operator=(const ParameterValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterValue& operator=(ParameterValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParameterValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParameterValue* internal_default_instance() {
    return reinterpret_cast<const ParameterValue*>(
               &_ParameterValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ParameterValue& a, ParameterValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParameterValue* New() const final {
    return CreateMaybeMessage<ParameterValue>(nullptr);
  }

  ParameterValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParameterValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParameterValue& from);
  void MergeFrom(const ParameterValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinc.ParameterValue";
  }
  protected:
  explicit ParameterValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tinc_5fprotocol_2eproto);
    return ::descriptor_table_tinc_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueListFieldNumber = 20,
    kValueStringFieldNumber = 30,
    kValueDoubleFieldNumber = 2,
    kValueFloatFieldNumber = 1,
    kValueInt32FieldNumber = 3,
    kValueInt64FieldNumber = 5,
    kValueUint64FieldNumber = 6,
    kValueInt8FieldNumber = 7,
    kValueUint8FieldNumber = 8,
    kValueUint32FieldNumber = 4,
  };
  // repeated .tinc.ParameterValue valueList = 20;
  int valuelist_size() const;
  private:
  int _internal_valuelist_size() const;
  public:
  void clear_valuelist();
  ::tinc::ParameterValue* mutable_valuelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinc::ParameterValue >*
      mutable_valuelist();
  private:
  const ::tinc::ParameterValue& _internal_valuelist(int index) const;
  ::tinc::ParameterValue* _internal_add_valuelist();
  public:
  const ::tinc::ParameterValue& valuelist(int index) const;
  ::tinc::ParameterValue* add_valuelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinc::ParameterValue >&
      valuelist() const;

  // string valueString = 30;
  void clear_valuestring();
  const std::string& valuestring() const;
  void set_valuestring(const std::string& value);
  void set_valuestring(std::string&& value);
  void set_valuestring(const char* value);
  void set_valuestring(const char* value, size_t size);
  std::string* mutable_valuestring();
  std::string* release_valuestring();
  void set_allocated_valuestring(std::string* valuestring);
  private:
  const std::string& _internal_valuestring() const;
  void _internal_set_valuestring(const std::string& value);
  std::string* _internal_mutable_valuestring();
  public:

  // double valueDouble = 2;
  void clear_valuedouble();
  double valuedouble() const;
  void set_valuedouble(double value);
  private:
  double _internal_valuedouble() const;
  void _internal_set_valuedouble(double value);
  public:

  // float valueFloat = 1;
  void clear_valuefloat();
  float valuefloat() const;
  void set_valuefloat(float value);
  private:
  float _internal_valuefloat() const;
  void _internal_set_valuefloat(float value);
  public:

  // int32 valueInt32 = 3;
  void clear_valueint32();
  ::PROTOBUF_NAMESPACE_ID::int32 valueint32() const;
  void set_valueint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_valueint32() const;
  void _internal_set_valueint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 valueInt64 = 5;
  void clear_valueint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 valueint64() const;
  void set_valueint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_valueint64() const;
  void _internal_set_valueint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 valueUint64 = 6;
  void clear_valueuint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 valueuint64() const;
  void set_valueuint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_valueuint64() const;
  void _internal_set_valueuint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 valueInt8 = 7;
  void clear_valueint8();
  ::PROTOBUF_NAMESPACE_ID::uint64 valueint8() const;
  void set_valueint8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_valueint8() const;
  void _internal_set_valueint8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 valueUint8 = 8;
  void clear_valueuint8();
  ::PROTOBUF_NAMESPACE_ID::uint64 valueuint8() const;
  void set_valueuint8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_valueuint8() const;
  void _internal_set_valueuint8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 valueUint32 = 4;
  void clear_valueuint32();
  ::PROTOBUF_NAMESPACE_ID::int32 valueuint32() const;
  void set_valueuint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_valueuint32() const;
  void _internal_set_valueuint32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:tinc.ParameterValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinc::ParameterValue > valuelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valuestring_;
  double valuedouble_;
  float valuefloat_;
  ::PROTOBUF_NAMESPACE_ID::int32 valueint32_;
  ::PROTOBUF_NAMESPACE_ID::uint64 valueint64_;
  ::PROTOBUF_NAMESPACE_ID::uint64 valueuint64_;
  ::PROTOBUF_NAMESPACE_ID::uint64 valueint8_;
  ::PROTOBUF_NAMESPACE_ID::uint64 valueuint8_;
  ::PROTOBUF_NAMESPACE_ID::int32 valueuint32_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tinc_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class RegisterProcessor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinc.RegisterProcessor) */ {
 public:
  inline RegisterProcessor() : RegisterProcessor(nullptr) {}
  virtual ~RegisterProcessor();

  RegisterProcessor(const RegisterProcessor& from);
  RegisterProcessor(RegisterProcessor&& from) noexcept
    : RegisterProcessor() {
    *this = ::std::move(from);
  }

  inline RegisterProcessor& operator=(const RegisterProcessor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterProcessor& operator=(RegisterProcessor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterProcessor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterProcessor* internal_default_instance() {
    return reinterpret_cast<const RegisterProcessor*>(
               &_RegisterProcessor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterProcessor& a, RegisterProcessor& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterProcessor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterProcessor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterProcessor* New() const final {
    return CreateMaybeMessage<RegisterProcessor>(nullptr);
  }

  RegisterProcessor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterProcessor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterProcessor& from);
  void MergeFrom(const RegisterProcessor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterProcessor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinc.RegisterProcessor";
  }
  protected:
  explicit RegisterProcessor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tinc_5fprotocol_2eproto);
    return ::descriptor_table_tinc_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFilesFieldNumber = 4,
    kOutputFilesFieldNumber = 6,
    kIdFieldNumber = 2,
    kInputDirectoryFieldNumber = 3,
    kOutputDirectoryFieldNumber = 5,
    kRunningDirectoryFieldNumber = 7,
    kTypeFieldNumber = 1,
  };
  // repeated string inputFiles = 4;
  int inputfiles_size() const;
  private:
  int _internal_inputfiles_size() const;
  public:
  void clear_inputfiles();
  const std::string& inputfiles(int index) const;
  std::string* mutable_inputfiles(int index);
  void set_inputfiles(int index, const std::string& value);
  void set_inputfiles(int index, std::string&& value);
  void set_inputfiles(int index, const char* value);
  void set_inputfiles(int index, const char* value, size_t size);
  std::string* add_inputfiles();
  void add_inputfiles(const std::string& value);
  void add_inputfiles(std::string&& value);
  void add_inputfiles(const char* value);
  void add_inputfiles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inputfiles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inputfiles();
  private:
  const std::string& _internal_inputfiles(int index) const;
  std::string* _internal_add_inputfiles();
  public:

  // repeated string outputFiles = 6;
  int outputfiles_size() const;
  private:
  int _internal_outputfiles_size() const;
  public:
  void clear_outputfiles();
  const std::string& outputfiles(int index) const;
  std::string* mutable_outputfiles(int index);
  void set_outputfiles(int index, const std::string& value);
  void set_outputfiles(int index, std::string&& value);
  void set_outputfiles(int index, const char* value);
  void set_outputfiles(int index, const char* value, size_t size);
  std::string* add_outputfiles();
  void add_outputfiles(const std::string& value);
  void add_outputfiles(std::string&& value);
  void add_outputfiles(const char* value);
  void add_outputfiles(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& outputfiles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_outputfiles();
  private:
  const std::string& _internal_outputfiles(int index) const;
  std::string* _internal_add_outputfiles();
  public:

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string inputDirectory = 3;
  void clear_inputdirectory();
  const std::string& inputdirectory() const;
  void set_inputdirectory(const std::string& value);
  void set_inputdirectory(std::string&& value);
  void set_inputdirectory(const char* value);
  void set_inputdirectory(const char* value, size_t size);
  std::string* mutable_inputdirectory();
  std::string* release_inputdirectory();
  void set_allocated_inputdirectory(std::string* inputdirectory);
  private:
  const std::string& _internal_inputdirectory() const;
  void _internal_set_inputdirectory(const std::string& value);
  std::string* _internal_mutable_inputdirectory();
  public:

  // string outputDirectory = 5;
  void clear_outputdirectory();
  const std::string& outputdirectory() const;
  void set_outputdirectory(const std::string& value);
  void set_outputdirectory(std::string&& value);
  void set_outputdirectory(const char* value);
  void set_outputdirectory(const char* value, size_t size);
  std::string* mutable_outputdirectory();
  std::string* release_outputdirectory();
  void set_allocated_outputdirectory(std::string* outputdirectory);
  private:
  const std::string& _internal_outputdirectory() const;
  void _internal_set_outputdirectory(const std::string& value);
  std::string* _internal_mutable_outputdirectory();
  public:

  // string runningDirectory = 7;
  void clear_runningdirectory();
  const std::string& runningdirectory() const;
  void set_runningdirectory(const std::string& value);
  void set_runningdirectory(std::string&& value);
  void set_runningdirectory(const char* value);
  void set_runningdirectory(const char* value, size_t size);
  std::string* mutable_runningdirectory();
  std::string* release_runningdirectory();
  void set_allocated_runningdirectory(std::string* runningdirectory);
  private:
  const std::string& _internal_runningdirectory() const;
  void _internal_set_runningdirectory(const std::string& value);
  std::string* _internal_mutable_runningdirectory();
  public:

  // .tinc.ProcessorType type = 1;
  void clear_type();
  ::tinc::ProcessorType type() const;
  void set_type(::tinc::ProcessorType value);
  private:
  ::tinc::ProcessorType _internal_type() const;
  void _internal_set_type(::tinc::ProcessorType value);
  public:

  // @@protoc_insertion_point(class_scope:tinc.RegisterProcessor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inputfiles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> outputfiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputdirectory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputdirectory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runningdirectory_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tinc_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class RegisterDataPool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinc.RegisterDataPool) */ {
 public:
  inline RegisterDataPool() : RegisterDataPool(nullptr) {}
  virtual ~RegisterDataPool();

  RegisterDataPool(const RegisterDataPool& from);
  RegisterDataPool(RegisterDataPool&& from) noexcept
    : RegisterDataPool() {
    *this = ::std::move(from);
  }

  inline RegisterDataPool& operator=(const RegisterDataPool& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterDataPool& operator=(RegisterDataPool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterDataPool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterDataPool* internal_default_instance() {
    return reinterpret_cast<const RegisterDataPool*>(
               &_RegisterDataPool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterDataPool& a, RegisterDataPool& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterDataPool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterDataPool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterDataPool* New() const final {
    return CreateMaybeMessage<RegisterDataPool>(nullptr);
  }

  RegisterDataPool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterDataPool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterDataPool& from);
  void MergeFrom(const RegisterDataPool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterDataPool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinc.RegisterDataPool";
  }
  protected:
  explicit RegisterDataPool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tinc_5fprotocol_2eproto);
    return ::descriptor_table_tinc_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kParameterSpaceIdFieldNumber = 3,
    kCacheDirectoryFieldNumber = 4,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string parameterSpaceId = 3;
  void clear_parameterspaceid();
  const std::string& parameterspaceid() const;
  void set_parameterspaceid(const std::string& value);
  void set_parameterspaceid(std::string&& value);
  void set_parameterspaceid(const char* value);
  void set_parameterspaceid(const char* value, size_t size);
  std::string* mutable_parameterspaceid();
  std::string* release_parameterspaceid();
  void set_allocated_parameterspaceid(std::string* parameterspaceid);
  private:
  const std::string& _internal_parameterspaceid() const;
  void _internal_set_parameterspaceid(const std::string& value);
  std::string* _internal_mutable_parameterspaceid();
  public:

  // string cacheDirectory = 4;
  void clear_cachedirectory();
  const std::string& cachedirectory() const;
  void set_cachedirectory(const std::string& value);
  void set_cachedirectory(std::string&& value);
  void set_cachedirectory(const char* value);
  void set_cachedirectory(const char* value, size_t size);
  std::string* mutable_cachedirectory();
  std::string* release_cachedirectory();
  void set_allocated_cachedirectory(std::string* cachedirectory);
  private:
  const std::string& _internal_cachedirectory() const;
  void _internal_set_cachedirectory(const std::string& value);
  std::string* _internal_mutable_cachedirectory();
  public:

  // @@protoc_insertion_point(class_scope:tinc.RegisterDataPool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameterspaceid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cachedirectory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tinc_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class RegisterDiskBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinc.RegisterDiskBuffer) */ {
 public:
  inline RegisterDiskBuffer() : RegisterDiskBuffer(nullptr) {}
  virtual ~RegisterDiskBuffer();

  RegisterDiskBuffer(const RegisterDiskBuffer& from);
  RegisterDiskBuffer(RegisterDiskBuffer&& from) noexcept
    : RegisterDiskBuffer() {
    *this = ::std::move(from);
  }

  inline RegisterDiskBuffer& operator=(const RegisterDiskBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterDiskBuffer& operator=(RegisterDiskBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterDiskBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterDiskBuffer* internal_default_instance() {
    return reinterpret_cast<const RegisterDiskBuffer*>(
               &_RegisterDiskBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterDiskBuffer& a, RegisterDiskBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterDiskBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterDiskBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterDiskBuffer* New() const final {
    return CreateMaybeMessage<RegisterDiskBuffer>(nullptr);
  }

  RegisterDiskBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterDiskBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterDiskBuffer& from);
  void MergeFrom(const RegisterDiskBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterDiskBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinc.RegisterDiskBuffer";
  }
  protected:
  explicit RegisterDiskBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tinc_5fprotocol_2eproto);
    return ::descriptor_table_tinc_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:tinc.RegisterDiskBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tinc_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class RegisterParameterSpace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinc.RegisterParameterSpace) */ {
 public:
  inline RegisterParameterSpace() : RegisterParameterSpace(nullptr) {}
  virtual ~RegisterParameterSpace();

  RegisterParameterSpace(const RegisterParameterSpace& from);
  RegisterParameterSpace(RegisterParameterSpace&& from) noexcept
    : RegisterParameterSpace() {
    *this = ::std::move(from);
  }

  inline RegisterParameterSpace& operator=(const RegisterParameterSpace& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterParameterSpace& operator=(RegisterParameterSpace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterParameterSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterParameterSpace* internal_default_instance() {
    return reinterpret_cast<const RegisterParameterSpace*>(
               &_RegisterParameterSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RegisterParameterSpace& a, RegisterParameterSpace& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterParameterSpace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterParameterSpace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterParameterSpace* New() const final {
    return CreateMaybeMessage<RegisterParameterSpace>(nullptr);
  }

  RegisterParameterSpace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterParameterSpace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterParameterSpace& from);
  void MergeFrom(const RegisterParameterSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterParameterSpace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinc.RegisterParameterSpace";
  }
  protected:
  explicit RegisterParameterSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tinc_5fprotocol_2eproto);
    return ::descriptor_table_tinc_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:tinc.RegisterParameterSpace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tinc_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class RegisterParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinc.RegisterParameter) */ {
 public:
  inline RegisterParameter() : RegisterParameter(nullptr) {}
  virtual ~RegisterParameter();

  RegisterParameter(const RegisterParameter& from);
  RegisterParameter(RegisterParameter&& from) noexcept
    : RegisterParameter() {
    *this = ::std::move(from);
  }

  inline RegisterParameter& operator=(const RegisterParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterParameter& operator=(RegisterParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterParameter* internal_default_instance() {
    return reinterpret_cast<const RegisterParameter*>(
               &_RegisterParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RegisterParameter& a, RegisterParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterParameter* New() const final {
    return CreateMaybeMessage<RegisterParameter>(nullptr);
  }

  RegisterParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterParameter& from);
  void MergeFrom(const RegisterParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinc.RegisterParameter";
  }
  protected:
  explicit RegisterParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tinc_5fprotocol_2eproto);
    return ::descriptor_table_tinc_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kGroupFieldNumber = 2,
    kDefaultValueFieldNumber = 4,
    kDataTypeFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string group = 2;
  void clear_group();
  const std::string& group() const;
  void set_group(const std::string& value);
  void set_group(std::string&& value);
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  std::string* mutable_group();
  std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // .tinc.ParameterValue defaultValue = 4;
  bool has_defaultvalue() const;
  private:
  bool _internal_has_defaultvalue() const;
  public:
  void clear_defaultvalue();
  const ::tinc::ParameterValue& defaultvalue() const;
  ::tinc::ParameterValue* release_defaultvalue();
  ::tinc::ParameterValue* mutable_defaultvalue();
  void set_allocated_defaultvalue(::tinc::ParameterValue* defaultvalue);
  private:
  const ::tinc::ParameterValue& _internal_defaultvalue() const;
  ::tinc::ParameterValue* _internal_mutable_defaultvalue();
  public:
  void unsafe_arena_set_allocated_defaultvalue(
      ::tinc::ParameterValue* defaultvalue);
  ::tinc::ParameterValue* unsafe_arena_release_defaultvalue();

  // .tinc.ParameterDataType dataType = 3;
  void clear_datatype();
  ::tinc::ParameterDataType datatype() const;
  void set_datatype(::tinc::ParameterDataType value);
  private:
  ::tinc::ParameterDataType _internal_datatype() const;
  void _internal_set_datatype(::tinc::ParameterDataType value);
  public:

  // @@protoc_insertion_point(class_scope:tinc.RegisterParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  ::tinc::ParameterValue* defaultvalue_;
  int datatype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tinc_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ParameterSpaceValues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinc.ParameterSpaceValues) */ {
 public:
  inline ParameterSpaceValues() : ParameterSpaceValues(nullptr) {}
  virtual ~ParameterSpaceValues();

  ParameterSpaceValues(const ParameterSpaceValues& from);
  ParameterSpaceValues(ParameterSpaceValues&& from) noexcept
    : ParameterSpaceValues() {
    *this = ::std::move(from);
  }

  inline ParameterSpaceValues& operator=(const ParameterSpaceValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterSpaceValues& operator=(ParameterSpaceValues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParameterSpaceValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParameterSpaceValues* internal_default_instance() {
    return reinterpret_cast<const ParameterSpaceValues*>(
               &_ParameterSpaceValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ParameterSpaceValues& a, ParameterSpaceValues& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterSpaceValues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterSpaceValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParameterSpaceValues* New() const final {
    return CreateMaybeMessage<ParameterSpaceValues>(nullptr);
  }

  ParameterSpaceValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParameterSpaceValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParameterSpaceValues& from);
  void MergeFrom(const ParameterSpaceValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterSpaceValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinc.ParameterSpaceValues";
  }
  protected:
  explicit ParameterSpaceValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tinc_5fprotocol_2eproto);
    return ::descriptor_table_tinc_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated string ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated .tinc.ParameterValue values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::tinc::ParameterValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinc::ParameterValue >*
      mutable_values();
  private:
  const ::tinc::ParameterValue& _internal_values(int index) const;
  ::tinc::ParameterValue* _internal_add_values();
  public:
  const ::tinc::ParameterValue& values(int index) const;
  ::tinc::ParameterValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinc::ParameterValue >&
      values() const;

  // @@protoc_insertion_point(class_scope:tinc.ParameterSpaceValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinc::ParameterValue > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tinc_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ConfigureParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinc.ConfigureParameter) */ {
 public:
  inline ConfigureParameter() : ConfigureParameter(nullptr) {}
  virtual ~ConfigureParameter();

  ConfigureParameter(const ConfigureParameter& from);
  ConfigureParameter(ConfigureParameter&& from) noexcept
    : ConfigureParameter() {
    *this = ::std::move(from);
  }

  inline ConfigureParameter& operator=(const ConfigureParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigureParameter& operator=(ConfigureParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigureParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigureParameter* internal_default_instance() {
    return reinterpret_cast<const ConfigureParameter*>(
               &_ConfigureParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ConfigureParameter& a, ConfigureParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigureParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigureParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigureParameter* New() const final {
    return CreateMaybeMessage<ConfigureParameter>(nullptr);
  }

  ConfigureParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigureParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigureParameter& from);
  void MergeFrom(const ConfigureParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigureParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinc.ConfigureParameter";
  }
  protected:
  explicit ConfigureParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tinc_5fprotocol_2eproto);
    return ::descriptor_table_tinc_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kConfigurationValueFieldNumber = 3,
    kConfigureKeyFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Any configurationValue = 3;
  bool has_configurationvalue() const;
  private:
  bool _internal_has_configurationvalue() const;
  public:
  void clear_configurationvalue();
  const PROTOBUF_NAMESPACE_ID::Any& configurationvalue() const;
  PROTOBUF_NAMESPACE_ID::Any* release_configurationvalue();
  PROTOBUF_NAMESPACE_ID::Any* mutable_configurationvalue();
  void set_allocated_configurationvalue(PROTOBUF_NAMESPACE_ID::Any* configurationvalue);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_configurationvalue() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_configurationvalue();
  public:
  void unsafe_arena_set_allocated_configurationvalue(
      PROTOBUF_NAMESPACE_ID::Any* configurationvalue);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_configurationvalue();

  // .tinc.ParameterConfigureType configureKey = 2;
  void clear_configurekey();
  ::tinc::ParameterConfigureType configurekey() const;
  void set_configurekey(::tinc::ParameterConfigureType value);
  private:
  ::tinc::ParameterConfigureType _internal_configurekey() const;
  void _internal_set_configurekey(::tinc::ParameterConfigureType value);
  public:

  // @@protoc_insertion_point(class_scope:tinc.ConfigureParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Any* configurationvalue_;
  int configurekey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tinc_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class ConfigureProcessor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tinc.ConfigureProcessor) */ {
 public:
  inline ConfigureProcessor() : ConfigureProcessor(nullptr) {}
  virtual ~ConfigureProcessor();

  ConfigureProcessor(const ConfigureProcessor& from);
  ConfigureProcessor(ConfigureProcessor&& from) noexcept
    : ConfigureProcessor() {
    *this = ::std::move(from);
  }

  inline ConfigureProcessor& operator=(const ConfigureProcessor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigureProcessor& operator=(ConfigureProcessor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigureProcessor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigureProcessor* internal_default_instance() {
    return reinterpret_cast<const ConfigureProcessor*>(
               &_ConfigureProcessor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ConfigureProcessor& a, ConfigureProcessor& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigureProcessor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigureProcessor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigureProcessor* New() const final {
    return CreateMaybeMessage<ConfigureProcessor>(nullptr);
  }

  ConfigureProcessor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigureProcessor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigureProcessor& from);
  void MergeFrom(const ConfigureProcessor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigureProcessor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tinc.ConfigureProcessor";
  }
  protected:
  explicit ConfigureProcessor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tinc_5fprotocol_2eproto);
    return ::descriptor_table_tinc_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kConfigureKeyFieldNumber = 2,
    kConfigurationValueFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string configureKey = 2;
  void clear_configurekey();
  const std::string& configurekey() const;
  void set_configurekey(const std::string& value);
  void set_configurekey(std::string&& value);
  void set_configurekey(const char* value);
  void set_configurekey(const char* value, size_t size);
  std::string* mutable_configurekey();
  std::string* release_configurekey();
  void set_allocated_configurekey(std::string* configurekey);
  private:
  const std::string& _internal_configurekey() const;
  void _internal_set_configurekey(const std::string& value);
  std::string* _internal_mutable_configurekey();
  public:

  // .google.protobuf.Any configurationValue = 3;
  bool has_configurationvalue() const;
  private:
  bool _internal_has_configurationvalue() const;
  public:
  void clear_configurationvalue();
  const PROTOBUF_NAMESPACE_ID::Any& configurationvalue() const;
  PROTOBUF_NAMESPACE_ID::Any* release_configurationvalue();
  PROTOBUF_NAMESPACE_ID::Any* mutable_configurationvalue();
  void set_allocated_configurationvalue(PROTOBUF_NAMESPACE_ID::Any* configurationvalue);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_configurationvalue() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_configurationvalue();
  public:
  void unsafe_arena_set_allocated_configurationvalue(
      PROTOBUF_NAMESPACE_ID::Any* configurationvalue);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_configurationvalue();

  // @@protoc_insertion_point(class_scope:tinc.ConfigureProcessor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurekey_;
  PROTOBUF_NAMESPACE_ID::Any* configurationvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tinc_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TincMessage

// .tinc.MessageType messageType = 2;
inline void TincMessage::clear_messagetype() {
  messagetype_ = 0;
}
inline ::tinc::MessageType TincMessage::_internal_messagetype() const {
  return static_cast< ::tinc::MessageType >(messagetype_);
}
inline ::tinc::MessageType TincMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:tinc.TincMessage.messageType)
  return _internal_messagetype();
}
inline void TincMessage::_internal_set_messagetype(::tinc::MessageType value) {
  
  messagetype_ = value;
}
inline void TincMessage::set_messagetype(::tinc::MessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:tinc.TincMessage.messageType)
}

// .tinc.ObjectType objectType = 3;
inline void TincMessage::clear_objecttype() {
  objecttype_ = 0;
}
inline ::tinc::ObjectType TincMessage::_internal_objecttype() const {
  return static_cast< ::tinc::ObjectType >(objecttype_);
}
inline ::tinc::ObjectType TincMessage::objecttype() const {
  // @@protoc_insertion_point(field_get:tinc.TincMessage.objectType)
  return _internal_objecttype();
}
inline void TincMessage::_internal_set_objecttype(::tinc::ObjectType value) {
  
  objecttype_ = value;
}
inline void TincMessage::set_objecttype(::tinc::ObjectType value) {
  _internal_set_objecttype(value);
  // @@protoc_insertion_point(field_set:tinc.TincMessage.objectType)
}

// .google.protobuf.Any details = 4;
inline bool TincMessage::_internal_has_details() const {
  return this != internal_default_instance() && details_ != nullptr;
}
inline bool TincMessage::has_details() const {
  return _internal_has_details();
}
inline const PROTOBUF_NAMESPACE_ID::Any& TincMessage::_internal_details() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = details_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& TincMessage::details() const {
  // @@protoc_insertion_point(field_get:tinc.TincMessage.details)
  return _internal_details();
}
inline void TincMessage::unsafe_arena_set_allocated_details(
    PROTOBUF_NAMESPACE_ID::Any* details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinc.TincMessage.details)
}
inline PROTOBUF_NAMESPACE_ID::Any* TincMessage::release_details() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = details_;
  details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* TincMessage::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:tinc.TincMessage.details)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = details_;
  details_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* TincMessage::_internal_mutable_details() {
  
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    details_ = p;
  }
  return details_;
}
inline PROTOBUF_NAMESPACE_ID::Any* TincMessage::mutable_details() {
  // @@protoc_insertion_point(field_mutable:tinc.TincMessage.details)
  return _internal_mutable_details();
}
inline void TincMessage::set_allocated_details(PROTOBUF_NAMESPACE_ID::Any* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details)->GetArena();
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    
  } else {
    
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:tinc.TincMessage.details)
}

// -------------------------------------------------------------------

// ObjectId

// string id = 1;
inline void ObjectId::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ObjectId::id() const {
  // @@protoc_insertion_point(field_get:tinc.ObjectId.id)
  return _internal_id();
}
inline void ObjectId::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tinc.ObjectId.id)
}
inline std::string* ObjectId::mutable_id() {
  // @@protoc_insertion_point(field_mutable:tinc.ObjectId.id)
  return _internal_mutable_id();
}
inline const std::string& ObjectId::_internal_id() const {
  return id_.Get();
}
inline void ObjectId::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ObjectId::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.ObjectId.id)
}
inline void ObjectId::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.ObjectId.id)
}
inline void ObjectId::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.ObjectId.id)
}
inline std::string* ObjectId::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ObjectId::release_id() {
  // @@protoc_insertion_point(field_release:tinc.ObjectId.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ObjectId::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.ObjectId.id)
}

// -------------------------------------------------------------------

// ParameterValue

// float valueFloat = 1;
inline void ParameterValue::clear_valuefloat() {
  valuefloat_ = 0;
}
inline float ParameterValue::_internal_valuefloat() const {
  return valuefloat_;
}
inline float ParameterValue::valuefloat() const {
  // @@protoc_insertion_point(field_get:tinc.ParameterValue.valueFloat)
  return _internal_valuefloat();
}
inline void ParameterValue::_internal_set_valuefloat(float value) {
  
  valuefloat_ = value;
}
inline void ParameterValue::set_valuefloat(float value) {
  _internal_set_valuefloat(value);
  // @@protoc_insertion_point(field_set:tinc.ParameterValue.valueFloat)
}

// double valueDouble = 2;
inline void ParameterValue::clear_valuedouble() {
  valuedouble_ = 0;
}
inline double ParameterValue::_internal_valuedouble() const {
  return valuedouble_;
}
inline double ParameterValue::valuedouble() const {
  // @@protoc_insertion_point(field_get:tinc.ParameterValue.valueDouble)
  return _internal_valuedouble();
}
inline void ParameterValue::_internal_set_valuedouble(double value) {
  
  valuedouble_ = value;
}
inline void ParameterValue::set_valuedouble(double value) {
  _internal_set_valuedouble(value);
  // @@protoc_insertion_point(field_set:tinc.ParameterValue.valueDouble)
}

// int32 valueInt32 = 3;
inline void ParameterValue::clear_valueint32() {
  valueint32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParameterValue::_internal_valueint32() const {
  return valueint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParameterValue::valueint32() const {
  // @@protoc_insertion_point(field_get:tinc.ParameterValue.valueInt32)
  return _internal_valueint32();
}
inline void ParameterValue::_internal_set_valueint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  valueint32_ = value;
}
inline void ParameterValue::set_valueint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_valueint32(value);
  // @@protoc_insertion_point(field_set:tinc.ParameterValue.valueInt32)
}

// int32 valueUint32 = 4;
inline void ParameterValue::clear_valueuint32() {
  valueuint32_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParameterValue::_internal_valueuint32() const {
  return valueuint32_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ParameterValue::valueuint32() const {
  // @@protoc_insertion_point(field_get:tinc.ParameterValue.valueUint32)
  return _internal_valueuint32();
}
inline void ParameterValue::_internal_set_valueuint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  valueuint32_ = value;
}
inline void ParameterValue::set_valueuint32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_valueuint32(value);
  // @@protoc_insertion_point(field_set:tinc.ParameterValue.valueUint32)
}

// uint64 valueInt64 = 5;
inline void ParameterValue::clear_valueint64() {
  valueint64_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParameterValue::_internal_valueint64() const {
  return valueint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParameterValue::valueint64() const {
  // @@protoc_insertion_point(field_get:tinc.ParameterValue.valueInt64)
  return _internal_valueint64();
}
inline void ParameterValue::_internal_set_valueint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  valueint64_ = value;
}
inline void ParameterValue::set_valueint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_valueint64(value);
  // @@protoc_insertion_point(field_set:tinc.ParameterValue.valueInt64)
}

// uint64 valueUint64 = 6;
inline void ParameterValue::clear_valueuint64() {
  valueuint64_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParameterValue::_internal_valueuint64() const {
  return valueuint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParameterValue::valueuint64() const {
  // @@protoc_insertion_point(field_get:tinc.ParameterValue.valueUint64)
  return _internal_valueuint64();
}
inline void ParameterValue::_internal_set_valueuint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  valueuint64_ = value;
}
inline void ParameterValue::set_valueuint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_valueuint64(value);
  // @@protoc_insertion_point(field_set:tinc.ParameterValue.valueUint64)
}

// uint64 valueInt8 = 7;
inline void ParameterValue::clear_valueint8() {
  valueint8_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParameterValue::_internal_valueint8() const {
  return valueint8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParameterValue::valueint8() const {
  // @@protoc_insertion_point(field_get:tinc.ParameterValue.valueInt8)
  return _internal_valueint8();
}
inline void ParameterValue::_internal_set_valueint8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  valueint8_ = value;
}
inline void ParameterValue::set_valueint8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_valueint8(value);
  // @@protoc_insertion_point(field_set:tinc.ParameterValue.valueInt8)
}

// uint64 valueUint8 = 8;
inline void ParameterValue::clear_valueuint8() {
  valueuint8_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParameterValue::_internal_valueuint8() const {
  return valueuint8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ParameterValue::valueuint8() const {
  // @@protoc_insertion_point(field_get:tinc.ParameterValue.valueUint8)
  return _internal_valueuint8();
}
inline void ParameterValue::_internal_set_valueuint8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  valueuint8_ = value;
}
inline void ParameterValue::set_valueuint8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_valueuint8(value);
  // @@protoc_insertion_point(field_set:tinc.ParameterValue.valueUint8)
}

// repeated .tinc.ParameterValue valueList = 20;
inline int ParameterValue::_internal_valuelist_size() const {
  return valuelist_.size();
}
inline int ParameterValue::valuelist_size() const {
  return _internal_valuelist_size();
}
inline void ParameterValue::clear_valuelist() {
  valuelist_.Clear();
}
inline ::tinc::ParameterValue* ParameterValue::mutable_valuelist(int index) {
  // @@protoc_insertion_point(field_mutable:tinc.ParameterValue.valueList)
  return valuelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinc::ParameterValue >*
ParameterValue::mutable_valuelist() {
  // @@protoc_insertion_point(field_mutable_list:tinc.ParameterValue.valueList)
  return &valuelist_;
}
inline const ::tinc::ParameterValue& ParameterValue::_internal_valuelist(int index) const {
  return valuelist_.Get(index);
}
inline const ::tinc::ParameterValue& ParameterValue::valuelist(int index) const {
  // @@protoc_insertion_point(field_get:tinc.ParameterValue.valueList)
  return _internal_valuelist(index);
}
inline ::tinc::ParameterValue* ParameterValue::_internal_add_valuelist() {
  return valuelist_.Add();
}
inline ::tinc::ParameterValue* ParameterValue::add_valuelist() {
  // @@protoc_insertion_point(field_add:tinc.ParameterValue.valueList)
  return _internal_add_valuelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinc::ParameterValue >&
ParameterValue::valuelist() const {
  // @@protoc_insertion_point(field_list:tinc.ParameterValue.valueList)
  return valuelist_;
}

// string valueString = 30;
inline void ParameterValue::clear_valuestring() {
  valuestring_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ParameterValue::valuestring() const {
  // @@protoc_insertion_point(field_get:tinc.ParameterValue.valueString)
  return _internal_valuestring();
}
inline void ParameterValue::set_valuestring(const std::string& value) {
  _internal_set_valuestring(value);
  // @@protoc_insertion_point(field_set:tinc.ParameterValue.valueString)
}
inline std::string* ParameterValue::mutable_valuestring() {
  // @@protoc_insertion_point(field_mutable:tinc.ParameterValue.valueString)
  return _internal_mutable_valuestring();
}
inline const std::string& ParameterValue::_internal_valuestring() const {
  return valuestring_.Get();
}
inline void ParameterValue::_internal_set_valuestring(const std::string& value) {
  
  valuestring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ParameterValue::set_valuestring(std::string&& value) {
  
  valuestring_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.ParameterValue.valueString)
}
inline void ParameterValue::set_valuestring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  valuestring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.ParameterValue.valueString)
}
inline void ParameterValue::set_valuestring(const char* value,
    size_t size) {
  
  valuestring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.ParameterValue.valueString)
}
inline std::string* ParameterValue::_internal_mutable_valuestring() {
  
  return valuestring_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ParameterValue::release_valuestring() {
  // @@protoc_insertion_point(field_release:tinc.ParameterValue.valueString)
  return valuestring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParameterValue::set_allocated_valuestring(std::string* valuestring) {
  if (valuestring != nullptr) {
    
  } else {
    
  }
  valuestring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), valuestring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.ParameterValue.valueString)
}

// -------------------------------------------------------------------

// RegisterProcessor

// string id = 2;
inline void RegisterProcessor::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterProcessor::id() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterProcessor.id)
  return _internal_id();
}
inline void RegisterProcessor::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterProcessor.id)
}
inline std::string* RegisterProcessor::mutable_id() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterProcessor.id)
  return _internal_mutable_id();
}
inline const std::string& RegisterProcessor::_internal_id() const {
  return id_.Get();
}
inline void RegisterProcessor::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterProcessor::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.RegisterProcessor.id)
}
inline void RegisterProcessor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.RegisterProcessor.id)
}
inline void RegisterProcessor::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterProcessor.id)
}
inline std::string* RegisterProcessor::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterProcessor::release_id() {
  // @@protoc_insertion_point(field_release:tinc.RegisterProcessor.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterProcessor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterProcessor.id)
}

// .tinc.ProcessorType type = 1;
inline void RegisterProcessor::clear_type() {
  type_ = 0;
}
inline ::tinc::ProcessorType RegisterProcessor::_internal_type() const {
  return static_cast< ::tinc::ProcessorType >(type_);
}
inline ::tinc::ProcessorType RegisterProcessor::type() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterProcessor.type)
  return _internal_type();
}
inline void RegisterProcessor::_internal_set_type(::tinc::ProcessorType value) {
  
  type_ = value;
}
inline void RegisterProcessor::set_type(::tinc::ProcessorType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterProcessor.type)
}

// string inputDirectory = 3;
inline void RegisterProcessor::clear_inputdirectory() {
  inputdirectory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterProcessor::inputdirectory() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterProcessor.inputDirectory)
  return _internal_inputdirectory();
}
inline void RegisterProcessor::set_inputdirectory(const std::string& value) {
  _internal_set_inputdirectory(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterProcessor.inputDirectory)
}
inline std::string* RegisterProcessor::mutable_inputdirectory() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterProcessor.inputDirectory)
  return _internal_mutable_inputdirectory();
}
inline const std::string& RegisterProcessor::_internal_inputdirectory() const {
  return inputdirectory_.Get();
}
inline void RegisterProcessor::_internal_set_inputdirectory(const std::string& value) {
  
  inputdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterProcessor::set_inputdirectory(std::string&& value) {
  
  inputdirectory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.RegisterProcessor.inputDirectory)
}
inline void RegisterProcessor::set_inputdirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inputdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.RegisterProcessor.inputDirectory)
}
inline void RegisterProcessor::set_inputdirectory(const char* value,
    size_t size) {
  
  inputdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterProcessor.inputDirectory)
}
inline std::string* RegisterProcessor::_internal_mutable_inputdirectory() {
  
  return inputdirectory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterProcessor::release_inputdirectory() {
  // @@protoc_insertion_point(field_release:tinc.RegisterProcessor.inputDirectory)
  return inputdirectory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterProcessor::set_allocated_inputdirectory(std::string* inputdirectory) {
  if (inputdirectory != nullptr) {
    
  } else {
    
  }
  inputdirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inputdirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterProcessor.inputDirectory)
}

// repeated string inputFiles = 4;
inline int RegisterProcessor::_internal_inputfiles_size() const {
  return inputfiles_.size();
}
inline int RegisterProcessor::inputfiles_size() const {
  return _internal_inputfiles_size();
}
inline void RegisterProcessor::clear_inputfiles() {
  inputfiles_.Clear();
}
inline std::string* RegisterProcessor::add_inputfiles() {
  // @@protoc_insertion_point(field_add_mutable:tinc.RegisterProcessor.inputFiles)
  return _internal_add_inputfiles();
}
inline const std::string& RegisterProcessor::_internal_inputfiles(int index) const {
  return inputfiles_.Get(index);
}
inline const std::string& RegisterProcessor::inputfiles(int index) const {
  // @@protoc_insertion_point(field_get:tinc.RegisterProcessor.inputFiles)
  return _internal_inputfiles(index);
}
inline std::string* RegisterProcessor::mutable_inputfiles(int index) {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterProcessor.inputFiles)
  return inputfiles_.Mutable(index);
}
inline void RegisterProcessor::set_inputfiles(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tinc.RegisterProcessor.inputFiles)
  inputfiles_.Mutable(index)->assign(value);
}
inline void RegisterProcessor::set_inputfiles(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tinc.RegisterProcessor.inputFiles)
  inputfiles_.Mutable(index)->assign(std::move(value));
}
inline void RegisterProcessor::set_inputfiles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inputfiles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinc.RegisterProcessor.inputFiles)
}
inline void RegisterProcessor::set_inputfiles(int index, const char* value, size_t size) {
  inputfiles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterProcessor.inputFiles)
}
inline std::string* RegisterProcessor::_internal_add_inputfiles() {
  return inputfiles_.Add();
}
inline void RegisterProcessor::add_inputfiles(const std::string& value) {
  inputfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinc.RegisterProcessor.inputFiles)
}
inline void RegisterProcessor::add_inputfiles(std::string&& value) {
  inputfiles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tinc.RegisterProcessor.inputFiles)
}
inline void RegisterProcessor::add_inputfiles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  inputfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinc.RegisterProcessor.inputFiles)
}
inline void RegisterProcessor::add_inputfiles(const char* value, size_t size) {
  inputfiles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinc.RegisterProcessor.inputFiles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RegisterProcessor::inputfiles() const {
  // @@protoc_insertion_point(field_list:tinc.RegisterProcessor.inputFiles)
  return inputfiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RegisterProcessor::mutable_inputfiles() {
  // @@protoc_insertion_point(field_mutable_list:tinc.RegisterProcessor.inputFiles)
  return &inputfiles_;
}

// string outputDirectory = 5;
inline void RegisterProcessor::clear_outputdirectory() {
  outputdirectory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterProcessor::outputdirectory() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterProcessor.outputDirectory)
  return _internal_outputdirectory();
}
inline void RegisterProcessor::set_outputdirectory(const std::string& value) {
  _internal_set_outputdirectory(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterProcessor.outputDirectory)
}
inline std::string* RegisterProcessor::mutable_outputdirectory() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterProcessor.outputDirectory)
  return _internal_mutable_outputdirectory();
}
inline const std::string& RegisterProcessor::_internal_outputdirectory() const {
  return outputdirectory_.Get();
}
inline void RegisterProcessor::_internal_set_outputdirectory(const std::string& value) {
  
  outputdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterProcessor::set_outputdirectory(std::string&& value) {
  
  outputdirectory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.RegisterProcessor.outputDirectory)
}
inline void RegisterProcessor::set_outputdirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outputdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.RegisterProcessor.outputDirectory)
}
inline void RegisterProcessor::set_outputdirectory(const char* value,
    size_t size) {
  
  outputdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterProcessor.outputDirectory)
}
inline std::string* RegisterProcessor::_internal_mutable_outputdirectory() {
  
  return outputdirectory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterProcessor::release_outputdirectory() {
  // @@protoc_insertion_point(field_release:tinc.RegisterProcessor.outputDirectory)
  return outputdirectory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterProcessor::set_allocated_outputdirectory(std::string* outputdirectory) {
  if (outputdirectory != nullptr) {
    
  } else {
    
  }
  outputdirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputdirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterProcessor.outputDirectory)
}

// repeated string outputFiles = 6;
inline int RegisterProcessor::_internal_outputfiles_size() const {
  return outputfiles_.size();
}
inline int RegisterProcessor::outputfiles_size() const {
  return _internal_outputfiles_size();
}
inline void RegisterProcessor::clear_outputfiles() {
  outputfiles_.Clear();
}
inline std::string* RegisterProcessor::add_outputfiles() {
  // @@protoc_insertion_point(field_add_mutable:tinc.RegisterProcessor.outputFiles)
  return _internal_add_outputfiles();
}
inline const std::string& RegisterProcessor::_internal_outputfiles(int index) const {
  return outputfiles_.Get(index);
}
inline const std::string& RegisterProcessor::outputfiles(int index) const {
  // @@protoc_insertion_point(field_get:tinc.RegisterProcessor.outputFiles)
  return _internal_outputfiles(index);
}
inline std::string* RegisterProcessor::mutable_outputfiles(int index) {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterProcessor.outputFiles)
  return outputfiles_.Mutable(index);
}
inline void RegisterProcessor::set_outputfiles(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tinc.RegisterProcessor.outputFiles)
  outputfiles_.Mutable(index)->assign(value);
}
inline void RegisterProcessor::set_outputfiles(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tinc.RegisterProcessor.outputFiles)
  outputfiles_.Mutable(index)->assign(std::move(value));
}
inline void RegisterProcessor::set_outputfiles(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputfiles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinc.RegisterProcessor.outputFiles)
}
inline void RegisterProcessor::set_outputfiles(int index, const char* value, size_t size) {
  outputfiles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterProcessor.outputFiles)
}
inline std::string* RegisterProcessor::_internal_add_outputfiles() {
  return outputfiles_.Add();
}
inline void RegisterProcessor::add_outputfiles(const std::string& value) {
  outputfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinc.RegisterProcessor.outputFiles)
}
inline void RegisterProcessor::add_outputfiles(std::string&& value) {
  outputfiles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tinc.RegisterProcessor.outputFiles)
}
inline void RegisterProcessor::add_outputfiles(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  outputfiles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinc.RegisterProcessor.outputFiles)
}
inline void RegisterProcessor::add_outputfiles(const char* value, size_t size) {
  outputfiles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinc.RegisterProcessor.outputFiles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RegisterProcessor::outputfiles() const {
  // @@protoc_insertion_point(field_list:tinc.RegisterProcessor.outputFiles)
  return outputfiles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RegisterProcessor::mutable_outputfiles() {
  // @@protoc_insertion_point(field_mutable_list:tinc.RegisterProcessor.outputFiles)
  return &outputfiles_;
}

// string runningDirectory = 7;
inline void RegisterProcessor::clear_runningdirectory() {
  runningdirectory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterProcessor::runningdirectory() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterProcessor.runningDirectory)
  return _internal_runningdirectory();
}
inline void RegisterProcessor::set_runningdirectory(const std::string& value) {
  _internal_set_runningdirectory(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterProcessor.runningDirectory)
}
inline std::string* RegisterProcessor::mutable_runningdirectory() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterProcessor.runningDirectory)
  return _internal_mutable_runningdirectory();
}
inline const std::string& RegisterProcessor::_internal_runningdirectory() const {
  return runningdirectory_.Get();
}
inline void RegisterProcessor::_internal_set_runningdirectory(const std::string& value) {
  
  runningdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterProcessor::set_runningdirectory(std::string&& value) {
  
  runningdirectory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.RegisterProcessor.runningDirectory)
}
inline void RegisterProcessor::set_runningdirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runningdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.RegisterProcessor.runningDirectory)
}
inline void RegisterProcessor::set_runningdirectory(const char* value,
    size_t size) {
  
  runningdirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterProcessor.runningDirectory)
}
inline std::string* RegisterProcessor::_internal_mutable_runningdirectory() {
  
  return runningdirectory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterProcessor::release_runningdirectory() {
  // @@protoc_insertion_point(field_release:tinc.RegisterProcessor.runningDirectory)
  return runningdirectory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterProcessor::set_allocated_runningdirectory(std::string* runningdirectory) {
  if (runningdirectory != nullptr) {
    
  } else {
    
  }
  runningdirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runningdirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterProcessor.runningDirectory)
}

// -------------------------------------------------------------------

// RegisterDataPool

// string id = 2;
inline void RegisterDataPool::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterDataPool::id() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterDataPool.id)
  return _internal_id();
}
inline void RegisterDataPool::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterDataPool.id)
}
inline std::string* RegisterDataPool::mutable_id() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterDataPool.id)
  return _internal_mutable_id();
}
inline const std::string& RegisterDataPool::_internal_id() const {
  return id_.Get();
}
inline void RegisterDataPool::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterDataPool::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.RegisterDataPool.id)
}
inline void RegisterDataPool::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.RegisterDataPool.id)
}
inline void RegisterDataPool::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterDataPool.id)
}
inline std::string* RegisterDataPool::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterDataPool::release_id() {
  // @@protoc_insertion_point(field_release:tinc.RegisterDataPool.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterDataPool::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterDataPool.id)
}

// string parameterSpaceId = 3;
inline void RegisterDataPool::clear_parameterspaceid() {
  parameterspaceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterDataPool::parameterspaceid() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterDataPool.parameterSpaceId)
  return _internal_parameterspaceid();
}
inline void RegisterDataPool::set_parameterspaceid(const std::string& value) {
  _internal_set_parameterspaceid(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterDataPool.parameterSpaceId)
}
inline std::string* RegisterDataPool::mutable_parameterspaceid() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterDataPool.parameterSpaceId)
  return _internal_mutable_parameterspaceid();
}
inline const std::string& RegisterDataPool::_internal_parameterspaceid() const {
  return parameterspaceid_.Get();
}
inline void RegisterDataPool::_internal_set_parameterspaceid(const std::string& value) {
  
  parameterspaceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterDataPool::set_parameterspaceid(std::string&& value) {
  
  parameterspaceid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.RegisterDataPool.parameterSpaceId)
}
inline void RegisterDataPool::set_parameterspaceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameterspaceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.RegisterDataPool.parameterSpaceId)
}
inline void RegisterDataPool::set_parameterspaceid(const char* value,
    size_t size) {
  
  parameterspaceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterDataPool.parameterSpaceId)
}
inline std::string* RegisterDataPool::_internal_mutable_parameterspaceid() {
  
  return parameterspaceid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterDataPool::release_parameterspaceid() {
  // @@protoc_insertion_point(field_release:tinc.RegisterDataPool.parameterSpaceId)
  return parameterspaceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterDataPool::set_allocated_parameterspaceid(std::string* parameterspaceid) {
  if (parameterspaceid != nullptr) {
    
  } else {
    
  }
  parameterspaceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameterspaceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterDataPool.parameterSpaceId)
}

// string cacheDirectory = 4;
inline void RegisterDataPool::clear_cachedirectory() {
  cachedirectory_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterDataPool::cachedirectory() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterDataPool.cacheDirectory)
  return _internal_cachedirectory();
}
inline void RegisterDataPool::set_cachedirectory(const std::string& value) {
  _internal_set_cachedirectory(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterDataPool.cacheDirectory)
}
inline std::string* RegisterDataPool::mutable_cachedirectory() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterDataPool.cacheDirectory)
  return _internal_mutable_cachedirectory();
}
inline const std::string& RegisterDataPool::_internal_cachedirectory() const {
  return cachedirectory_.Get();
}
inline void RegisterDataPool::_internal_set_cachedirectory(const std::string& value) {
  
  cachedirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterDataPool::set_cachedirectory(std::string&& value) {
  
  cachedirectory_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.RegisterDataPool.cacheDirectory)
}
inline void RegisterDataPool::set_cachedirectory(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cachedirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.RegisterDataPool.cacheDirectory)
}
inline void RegisterDataPool::set_cachedirectory(const char* value,
    size_t size) {
  
  cachedirectory_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterDataPool.cacheDirectory)
}
inline std::string* RegisterDataPool::_internal_mutable_cachedirectory() {
  
  return cachedirectory_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterDataPool::release_cachedirectory() {
  // @@protoc_insertion_point(field_release:tinc.RegisterDataPool.cacheDirectory)
  return cachedirectory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterDataPool::set_allocated_cachedirectory(std::string* cachedirectory) {
  if (cachedirectory != nullptr) {
    
  } else {
    
  }
  cachedirectory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cachedirectory,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterDataPool.cacheDirectory)
}

// -------------------------------------------------------------------

// RegisterDiskBuffer

// string id = 2;
inline void RegisterDiskBuffer::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterDiskBuffer::id() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterDiskBuffer.id)
  return _internal_id();
}
inline void RegisterDiskBuffer::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterDiskBuffer.id)
}
inline std::string* RegisterDiskBuffer::mutable_id() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterDiskBuffer.id)
  return _internal_mutable_id();
}
inline const std::string& RegisterDiskBuffer::_internal_id() const {
  return id_.Get();
}
inline void RegisterDiskBuffer::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterDiskBuffer::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.RegisterDiskBuffer.id)
}
inline void RegisterDiskBuffer::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.RegisterDiskBuffer.id)
}
inline void RegisterDiskBuffer::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterDiskBuffer.id)
}
inline std::string* RegisterDiskBuffer::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterDiskBuffer::release_id() {
  // @@protoc_insertion_point(field_release:tinc.RegisterDiskBuffer.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterDiskBuffer::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterDiskBuffer.id)
}

// -------------------------------------------------------------------

// RegisterParameterSpace

// string id = 2;
inline void RegisterParameterSpace::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterParameterSpace::id() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterParameterSpace.id)
  return _internal_id();
}
inline void RegisterParameterSpace::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterParameterSpace.id)
}
inline std::string* RegisterParameterSpace::mutable_id() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterParameterSpace.id)
  return _internal_mutable_id();
}
inline const std::string& RegisterParameterSpace::_internal_id() const {
  return id_.Get();
}
inline void RegisterParameterSpace::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterParameterSpace::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.RegisterParameterSpace.id)
}
inline void RegisterParameterSpace::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.RegisterParameterSpace.id)
}
inline void RegisterParameterSpace::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterParameterSpace.id)
}
inline std::string* RegisterParameterSpace::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterParameterSpace::release_id() {
  // @@protoc_insertion_point(field_release:tinc.RegisterParameterSpace.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterParameterSpace::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterParameterSpace.id)
}

// -------------------------------------------------------------------

// RegisterParameter

// string id = 1;
inline void RegisterParameter::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterParameter::id() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterParameter.id)
  return _internal_id();
}
inline void RegisterParameter::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterParameter.id)
}
inline std::string* RegisterParameter::mutable_id() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterParameter.id)
  return _internal_mutable_id();
}
inline const std::string& RegisterParameter::_internal_id() const {
  return id_.Get();
}
inline void RegisterParameter::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterParameter::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.RegisterParameter.id)
}
inline void RegisterParameter::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.RegisterParameter.id)
}
inline void RegisterParameter::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterParameter.id)
}
inline std::string* RegisterParameter::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterParameter::release_id() {
  // @@protoc_insertion_point(field_release:tinc.RegisterParameter.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterParameter::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterParameter.id)
}

// string group = 2;
inline void RegisterParameter::clear_group() {
  group_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterParameter::group() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterParameter.group)
  return _internal_group();
}
inline void RegisterParameter::set_group(const std::string& value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterParameter.group)
}
inline std::string* RegisterParameter::mutable_group() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterParameter.group)
  return _internal_mutable_group();
}
inline const std::string& RegisterParameter::_internal_group() const {
  return group_.Get();
}
inline void RegisterParameter::_internal_set_group(const std::string& value) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterParameter::set_group(std::string&& value) {
  
  group_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.RegisterParameter.group)
}
inline void RegisterParameter::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.RegisterParameter.group)
}
inline void RegisterParameter::set_group(const char* value,
    size_t size) {
  
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.RegisterParameter.group)
}
inline std::string* RegisterParameter::_internal_mutable_group() {
  
  return group_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterParameter::release_group() {
  // @@protoc_insertion_point(field_release:tinc.RegisterParameter.group)
  return group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterParameter::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterParameter.group)
}

// .tinc.ParameterDataType dataType = 3;
inline void RegisterParameter::clear_datatype() {
  datatype_ = 0;
}
inline ::tinc::ParameterDataType RegisterParameter::_internal_datatype() const {
  return static_cast< ::tinc::ParameterDataType >(datatype_);
}
inline ::tinc::ParameterDataType RegisterParameter::datatype() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterParameter.dataType)
  return _internal_datatype();
}
inline void RegisterParameter::_internal_set_datatype(::tinc::ParameterDataType value) {
  
  datatype_ = value;
}
inline void RegisterParameter::set_datatype(::tinc::ParameterDataType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:tinc.RegisterParameter.dataType)
}

// .tinc.ParameterValue defaultValue = 4;
inline bool RegisterParameter::_internal_has_defaultvalue() const {
  return this != internal_default_instance() && defaultvalue_ != nullptr;
}
inline bool RegisterParameter::has_defaultvalue() const {
  return _internal_has_defaultvalue();
}
inline void RegisterParameter::clear_defaultvalue() {
  if (GetArena() == nullptr && defaultvalue_ != nullptr) {
    delete defaultvalue_;
  }
  defaultvalue_ = nullptr;
}
inline const ::tinc::ParameterValue& RegisterParameter::_internal_defaultvalue() const {
  const ::tinc::ParameterValue* p = defaultvalue_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tinc::ParameterValue*>(
      &::tinc::_ParameterValue_default_instance_);
}
inline const ::tinc::ParameterValue& RegisterParameter::defaultvalue() const {
  // @@protoc_insertion_point(field_get:tinc.RegisterParameter.defaultValue)
  return _internal_defaultvalue();
}
inline void RegisterParameter::unsafe_arena_set_allocated_defaultvalue(
    ::tinc::ParameterValue* defaultvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultvalue_);
  }
  defaultvalue_ = defaultvalue;
  if (defaultvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinc.RegisterParameter.defaultValue)
}
inline ::tinc::ParameterValue* RegisterParameter::release_defaultvalue() {
  
  ::tinc::ParameterValue* temp = defaultvalue_;
  defaultvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tinc::ParameterValue* RegisterParameter::unsafe_arena_release_defaultvalue() {
  // @@protoc_insertion_point(field_release:tinc.RegisterParameter.defaultValue)
  
  ::tinc::ParameterValue* temp = defaultvalue_;
  defaultvalue_ = nullptr;
  return temp;
}
inline ::tinc::ParameterValue* RegisterParameter::_internal_mutable_defaultvalue() {
  
  if (defaultvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::tinc::ParameterValue>(GetArena());
    defaultvalue_ = p;
  }
  return defaultvalue_;
}
inline ::tinc::ParameterValue* RegisterParameter::mutable_defaultvalue() {
  // @@protoc_insertion_point(field_mutable:tinc.RegisterParameter.defaultValue)
  return _internal_mutable_defaultvalue();
}
inline void RegisterParameter::set_allocated_defaultvalue(::tinc::ParameterValue* defaultvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete defaultvalue_;
  }
  if (defaultvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(defaultvalue);
    if (message_arena != submessage_arena) {
      defaultvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultvalue, submessage_arena);
    }
    
  } else {
    
  }
  defaultvalue_ = defaultvalue;
  // @@protoc_insertion_point(field_set_allocated:tinc.RegisterParameter.defaultValue)
}

// -------------------------------------------------------------------

// ParameterSpaceValues

// repeated string ids = 1;
inline int ParameterSpaceValues::_internal_ids_size() const {
  return ids_.size();
}
inline int ParameterSpaceValues::ids_size() const {
  return _internal_ids_size();
}
inline void ParameterSpaceValues::clear_ids() {
  ids_.Clear();
}
inline std::string* ParameterSpaceValues::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:tinc.ParameterSpaceValues.ids)
  return _internal_add_ids();
}
inline const std::string& ParameterSpaceValues::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& ParameterSpaceValues::ids(int index) const {
  // @@protoc_insertion_point(field_get:tinc.ParameterSpaceValues.ids)
  return _internal_ids(index);
}
inline std::string* ParameterSpaceValues::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:tinc.ParameterSpaceValues.ids)
  return ids_.Mutable(index);
}
inline void ParameterSpaceValues::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tinc.ParameterSpaceValues.ids)
  ids_.Mutable(index)->assign(value);
}
inline void ParameterSpaceValues::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tinc.ParameterSpaceValues.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void ParameterSpaceValues::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tinc.ParameterSpaceValues.ids)
}
inline void ParameterSpaceValues::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tinc.ParameterSpaceValues.ids)
}
inline std::string* ParameterSpaceValues::_internal_add_ids() {
  return ids_.Add();
}
inline void ParameterSpaceValues::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tinc.ParameterSpaceValues.ids)
}
inline void ParameterSpaceValues::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tinc.ParameterSpaceValues.ids)
}
inline void ParameterSpaceValues::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tinc.ParameterSpaceValues.ids)
}
inline void ParameterSpaceValues::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tinc.ParameterSpaceValues.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ParameterSpaceValues::ids() const {
  // @@protoc_insertion_point(field_list:tinc.ParameterSpaceValues.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ParameterSpaceValues::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:tinc.ParameterSpaceValues.ids)
  return &ids_;
}

// repeated .tinc.ParameterValue values = 2;
inline int ParameterSpaceValues::_internal_values_size() const {
  return values_.size();
}
inline int ParameterSpaceValues::values_size() const {
  return _internal_values_size();
}
inline void ParameterSpaceValues::clear_values() {
  values_.Clear();
}
inline ::tinc::ParameterValue* ParameterSpaceValues::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:tinc.ParameterSpaceValues.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinc::ParameterValue >*
ParameterSpaceValues::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:tinc.ParameterSpaceValues.values)
  return &values_;
}
inline const ::tinc::ParameterValue& ParameterSpaceValues::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::tinc::ParameterValue& ParameterSpaceValues::values(int index) const {
  // @@protoc_insertion_point(field_get:tinc.ParameterSpaceValues.values)
  return _internal_values(index);
}
inline ::tinc::ParameterValue* ParameterSpaceValues::_internal_add_values() {
  return values_.Add();
}
inline ::tinc::ParameterValue* ParameterSpaceValues::add_values() {
  // @@protoc_insertion_point(field_add:tinc.ParameterSpaceValues.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tinc::ParameterValue >&
ParameterSpaceValues::values() const {
  // @@protoc_insertion_point(field_list:tinc.ParameterSpaceValues.values)
  return values_;
}

// -------------------------------------------------------------------

// ConfigureParameter

// string id = 1;
inline void ConfigureParameter::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfigureParameter::id() const {
  // @@protoc_insertion_point(field_get:tinc.ConfigureParameter.id)
  return _internal_id();
}
inline void ConfigureParameter::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tinc.ConfigureParameter.id)
}
inline std::string* ConfigureParameter::mutable_id() {
  // @@protoc_insertion_point(field_mutable:tinc.ConfigureParameter.id)
  return _internal_mutable_id();
}
inline const std::string& ConfigureParameter::_internal_id() const {
  return id_.Get();
}
inline void ConfigureParameter::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigureParameter::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.ConfigureParameter.id)
}
inline void ConfigureParameter::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.ConfigureParameter.id)
}
inline void ConfigureParameter::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.ConfigureParameter.id)
}
inline std::string* ConfigureParameter::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigureParameter::release_id() {
  // @@protoc_insertion_point(field_release:tinc.ConfigureParameter.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigureParameter::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.ConfigureParameter.id)
}

// .tinc.ParameterConfigureType configureKey = 2;
inline void ConfigureParameter::clear_configurekey() {
  configurekey_ = 0;
}
inline ::tinc::ParameterConfigureType ConfigureParameter::_internal_configurekey() const {
  return static_cast< ::tinc::ParameterConfigureType >(configurekey_);
}
inline ::tinc::ParameterConfigureType ConfigureParameter::configurekey() const {
  // @@protoc_insertion_point(field_get:tinc.ConfigureParameter.configureKey)
  return _internal_configurekey();
}
inline void ConfigureParameter::_internal_set_configurekey(::tinc::ParameterConfigureType value) {
  
  configurekey_ = value;
}
inline void ConfigureParameter::set_configurekey(::tinc::ParameterConfigureType value) {
  _internal_set_configurekey(value);
  // @@protoc_insertion_point(field_set:tinc.ConfigureParameter.configureKey)
}

// .google.protobuf.Any configurationValue = 3;
inline bool ConfigureParameter::_internal_has_configurationvalue() const {
  return this != internal_default_instance() && configurationvalue_ != nullptr;
}
inline bool ConfigureParameter::has_configurationvalue() const {
  return _internal_has_configurationvalue();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ConfigureParameter::_internal_configurationvalue() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = configurationvalue_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ConfigureParameter::configurationvalue() const {
  // @@protoc_insertion_point(field_get:tinc.ConfigureParameter.configurationValue)
  return _internal_configurationvalue();
}
inline void ConfigureParameter::unsafe_arena_set_allocated_configurationvalue(
    PROTOBUF_NAMESPACE_ID::Any* configurationvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configurationvalue_);
  }
  configurationvalue_ = configurationvalue;
  if (configurationvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinc.ConfigureParameter.configurationValue)
}
inline PROTOBUF_NAMESPACE_ID::Any* ConfigureParameter::release_configurationvalue() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = configurationvalue_;
  configurationvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConfigureParameter::unsafe_arena_release_configurationvalue() {
  // @@protoc_insertion_point(field_release:tinc.ConfigureParameter.configurationValue)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = configurationvalue_;
  configurationvalue_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConfigureParameter::_internal_mutable_configurationvalue() {
  
  if (configurationvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    configurationvalue_ = p;
  }
  return configurationvalue_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConfigureParameter::mutable_configurationvalue() {
  // @@protoc_insertion_point(field_mutable:tinc.ConfigureParameter.configurationValue)
  return _internal_mutable_configurationvalue();
}
inline void ConfigureParameter::set_allocated_configurationvalue(PROTOBUF_NAMESPACE_ID::Any* configurationvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configurationvalue_);
  }
  if (configurationvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configurationvalue)->GetArena();
    if (message_arena != submessage_arena) {
      configurationvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configurationvalue, submessage_arena);
    }
    
  } else {
    
  }
  configurationvalue_ = configurationvalue;
  // @@protoc_insertion_point(field_set_allocated:tinc.ConfigureParameter.configurationValue)
}

// -------------------------------------------------------------------

// ConfigureProcessor

// string id = 1;
inline void ConfigureProcessor::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfigureProcessor::id() const {
  // @@protoc_insertion_point(field_get:tinc.ConfigureProcessor.id)
  return _internal_id();
}
inline void ConfigureProcessor::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:tinc.ConfigureProcessor.id)
}
inline std::string* ConfigureProcessor::mutable_id() {
  // @@protoc_insertion_point(field_mutable:tinc.ConfigureProcessor.id)
  return _internal_mutable_id();
}
inline const std::string& ConfigureProcessor::_internal_id() const {
  return id_.Get();
}
inline void ConfigureProcessor::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigureProcessor::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.ConfigureProcessor.id)
}
inline void ConfigureProcessor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.ConfigureProcessor.id)
}
inline void ConfigureProcessor::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.ConfigureProcessor.id)
}
inline std::string* ConfigureProcessor::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigureProcessor::release_id() {
  // @@protoc_insertion_point(field_release:tinc.ConfigureProcessor.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigureProcessor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.ConfigureProcessor.id)
}

// string configureKey = 2;
inline void ConfigureProcessor::clear_configurekey() {
  configurekey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ConfigureProcessor::configurekey() const {
  // @@protoc_insertion_point(field_get:tinc.ConfigureProcessor.configureKey)
  return _internal_configurekey();
}
inline void ConfigureProcessor::set_configurekey(const std::string& value) {
  _internal_set_configurekey(value);
  // @@protoc_insertion_point(field_set:tinc.ConfigureProcessor.configureKey)
}
inline std::string* ConfigureProcessor::mutable_configurekey() {
  // @@protoc_insertion_point(field_mutable:tinc.ConfigureProcessor.configureKey)
  return _internal_mutable_configurekey();
}
inline const std::string& ConfigureProcessor::_internal_configurekey() const {
  return configurekey_.Get();
}
inline void ConfigureProcessor::_internal_set_configurekey(const std::string& value) {
  
  configurekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigureProcessor::set_configurekey(std::string&& value) {
  
  configurekey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tinc.ConfigureProcessor.configureKey)
}
inline void ConfigureProcessor::set_configurekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configurekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tinc.ConfigureProcessor.configureKey)
}
inline void ConfigureProcessor::set_configurekey(const char* value,
    size_t size) {
  
  configurekey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tinc.ConfigureProcessor.configureKey)
}
inline std::string* ConfigureProcessor::_internal_mutable_configurekey() {
  
  return configurekey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigureProcessor::release_configurekey() {
  // @@protoc_insertion_point(field_release:tinc.ConfigureProcessor.configureKey)
  return configurekey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigureProcessor::set_allocated_configurekey(std::string* configurekey) {
  if (configurekey != nullptr) {
    
  } else {
    
  }
  configurekey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configurekey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tinc.ConfigureProcessor.configureKey)
}

// .google.protobuf.Any configurationValue = 3;
inline bool ConfigureProcessor::_internal_has_configurationvalue() const {
  return this != internal_default_instance() && configurationvalue_ != nullptr;
}
inline bool ConfigureProcessor::has_configurationvalue() const {
  return _internal_has_configurationvalue();
}
inline const PROTOBUF_NAMESPACE_ID::Any& ConfigureProcessor::_internal_configurationvalue() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = configurationvalue_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ConfigureProcessor::configurationvalue() const {
  // @@protoc_insertion_point(field_get:tinc.ConfigureProcessor.configurationValue)
  return _internal_configurationvalue();
}
inline void ConfigureProcessor::unsafe_arena_set_allocated_configurationvalue(
    PROTOBUF_NAMESPACE_ID::Any* configurationvalue) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configurationvalue_);
  }
  configurationvalue_ = configurationvalue;
  if (configurationvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinc.ConfigureProcessor.configurationValue)
}
inline PROTOBUF_NAMESPACE_ID::Any* ConfigureProcessor::release_configurationvalue() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = configurationvalue_;
  configurationvalue_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConfigureProcessor::unsafe_arena_release_configurationvalue() {
  // @@protoc_insertion_point(field_release:tinc.ConfigureProcessor.configurationValue)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = configurationvalue_;
  configurationvalue_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConfigureProcessor::_internal_mutable_configurationvalue() {
  
  if (configurationvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    configurationvalue_ = p;
  }
  return configurationvalue_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConfigureProcessor::mutable_configurationvalue() {
  // @@protoc_insertion_point(field_mutable:tinc.ConfigureProcessor.configurationValue)
  return _internal_mutable_configurationvalue();
}
inline void ConfigureProcessor::set_allocated_configurationvalue(PROTOBUF_NAMESPACE_ID::Any* configurationvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configurationvalue_);
  }
  if (configurationvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configurationvalue)->GetArena();
    if (message_arena != submessage_arena) {
      configurationvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configurationvalue, submessage_arena);
    }
    
  } else {
    
  }
  configurationvalue_ = configurationvalue;
  // @@protoc_insertion_point(field_set_allocated:tinc.ConfigureProcessor.configurationValue)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tinc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tinc::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinc::MessageType>() {
  return ::tinc::MessageType_descriptor();
}
template <> struct is_proto_enum< ::tinc::ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinc::ObjectType>() {
  return ::tinc::ObjectType_descriptor();
}
template <> struct is_proto_enum< ::tinc::ProcessorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinc::ProcessorType>() {
  return ::tinc::ProcessorType_descriptor();
}
template <> struct is_proto_enum< ::tinc::ParameterDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinc::ParameterDataType>() {
  return ::tinc::ParameterDataType_descriptor();
}
template <> struct is_proto_enum< ::tinc::ParameterConfigureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tinc::ParameterConfigureType>() {
  return ::tinc::ParameterConfigureType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tinc_5fprotocol_2eproto
